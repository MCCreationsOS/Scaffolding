{"mappings":"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","sources":["api_v1/index.ts","api_v1/community/routes.ts","api_v1/db/connect.ts","api_v1/logging/logging.ts","api_v1/community/rate.ts","api_v1/content/maps/routes.ts","api_v1/auth/routes.ts","api_v1/auth/types.ts","api_v1/email/email.ts","api_v1/db/types.ts","api_v1/content/searching.ts","api_v1/content/routes.ts","api_v1/meilisearch.ts","api_v1/content/creation.ts","api_v1/s3/upload.ts"],"sourcesContent":["import * as fs from 'fs';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport { createServer as createHttpServer } from 'http';\nimport { initializeCommunityRoutes } from './community/routes.js';\nimport { initializeMapRoutes } from './content/maps/routes.js';\nimport { initializeAuthRoutes, refreshJWTHash } from './auth/routes.js';\nimport { MongoClient } from 'mongodb';\nimport { initializeContentRoutes } from './content/routes.js';\nimport { approvedEmail } from './email/email.js';\nimport { updateMeilisearch } from './meilisearch.js';\n\nexport const app = express();\napp.use(helmet());\napp.use(bodyParser.json())\napp.use(cors());\napp.use(morgan('combined'));\n\nexport const client = new MongoClient(\"mongodb+srv://app-test:%40pp-t$st@mccreations.454k0cx.mongodb.net/?retryWrites=true&w=majority&appName=mccreations\");\n\n/**\n * Routes are broken up into separate files based on the 'section' of the site they are for.\n * Even though all content routes live in the same content folder they each have their own initialization function.\n */\n\ninitializeCommunityRoutes();\ninitializeMapRoutes();\ninitializeAuthRoutes();\ninitializeContentRoutes();\n\nsetInterval(updateMeilisearch, 1000 * 60 * 60 * 24);\nsetInterval(refreshJWTHash, 1000 * 60 * 60 * 24 * 15);\n\nvar httpServer = createHttpServer(app);\nhttpServer.listen(8080);\n\n","import { app } from \"../index.js\";\nimport { Database, DatabaseQueryBuilder } from \"../db/connect.js\";\nimport { rateContent } from \"./rate.js\";\nimport { User } from \"../auth/types.js\";\nimport * as words from 'naughty-words';\n\nexport function initializeCommunityRoutes() {\n    app.get('/creators', async (req, res) => {\n        let database = new Database('content', 'creators')\n        let query = new DatabaseQueryBuilder();\n\n        query.setProjection({\n            password: 0,\n            providers: 0\n        })\n\n        let cursor = await database.executeQuery(query)\n        let documents = []\n        let count = 0;\n        for await (const doc of cursor) {\n            documents.push(doc);\n            count++;\n        }\n        let result = {\n            totalCount: count,\n            documents: documents\n        }\n        res.send(result);\n    })\n\n    app.get('/creator/:handle', async (req, res) => {\n        let database = new Database('content', 'creators')\n        let query = new DatabaseQueryBuilder();\n\n        query.buildQuery(\"handle\", req.params.handle)\n\n        query.setProjection({\n            password: 0,\n            providers: 0,\n            email: 0\n        })\n\n        let cursor = await database.executeQuery(query)\n        res.send(await cursor.next());\n\n    })\n\n    app.post('/rate', async (req, res) => {\n        let rating = await rateContent(Number.parseFloat(req.body.rating), req.body.map)\n        res.send({rating: rating})\n    })\n\n    app.post('/maps/rate', async (req, res) => {\n        let rating = await rateContent(Number.parseFloat(req.body.rating), req.body.map)\n        res.send({message: \"This route is out of date, please use /rate.\", rating: rating})\n    })\n    \n    app.post('/maps/comment/:slug', async (req, res) => {\n        let database = new Database();\n        let comments = new Database(\"content\", \"comments\")\n\n        let approved = true\n        if(words.en.some((word) => req.body.comment.includes(word))) {\n            approved = false\n        }\n    \n        let comment = await comments.collection.insertOne({username: req.body.username, comment: req.body.comment, date: Date.now(), likes: 0, handle: req.body.handle, approved: approved, slug: req.params.slug})\n        database.collection.updateOne({slug: req.params.slug}, {$push: {comments: {_id: comment.insertedId, username: req.body.username, comment: req.body.comment, date: Date.now(), likes: 0, handle: req.body.handle, approved: approved}}})\n        res.sendStatus(200)\n    })\n}","import { MeiliSearch } from \"meilisearch\";\nimport { client } from \"../index.js\";\nimport { IDatabaseQuery, SearchIndex } from \"./types.js\";\n\n// const { MongoClient, ServerApiVersion } = require('mongodb');\nimport { Collection, Filter, MongoClient, ServerApiVersion, Sort, SortDirection, Document, FilterOperators } from 'mongodb';\nimport { sendLog } from \"../logging/logging.js\";\n\n\nconst connectionsPool: {client: MongoClient, inUse: boolean}[] = [];\n\nexport class Database {\n    database\n    collection\n\n    constructor(databaseName?: string, collectionName?: string) {\n        if(databaseName) {\n            this.database = client.db(databaseName);\n            this.collection = this.database.collection(collectionName || \"\");\n        } else {\n            this.database = client.db('content');\n            this.collection = this.database.collection('Maps');\n        }\n        this.createSearchIndex();\n\n    }\n\n    createSearchIndex() {\n        this.collection.createIndex({title: \"text\", \"creators.username\": \"text\", shortDescription: \"text\"})\n    }\n\n    executeQuery(query: IDatabaseQuery) {\n        let c = this.collection.find(query.query).limit(query.limit).sort(query.sort).project(query.projection).skip(query.skip);\n        return c\n    }\n}\n\nexport class DatabaseQueryBuilder {\n    query\n    sort\n    limit\n    projection\n    skip\n\n    constructor(query?: Filter<Document>, sort?: Sort, projection?: any, limit?: number, skip?: number) {\n        this.query = query || {};\n        this.sort = sort || {};\n        this.projection = projection || {};\n        this.limit = limit || 20;\n        this.skip = skip || 0;\n    }\n\n    buildQuery(field: string, value: any) {\n        this.query[field] = value;\n    }\n\n    buildQueryWithOperation(field: string, value: any, operation: any) {\n        let operator: FilterOperators<typeof value> = {}\n        operator[operation] = value;\n        this.query = {...this.query, [field]: operator}\n    }\n\n    setQuery(query: any) {\n        this.query = query;\n    }\n\n    buildSort(field: string, value: SortDirection) {\n        this.sort = {[field]: value};\n    }\n\n    setSort(sort: any) {\n        this.sort = sort;\n    }\n\n    setLimit(amount: number) {\n        this.limit = amount;\n    }\n\n    setProjection(projection: any) {\n        this.projection = projection;\n    }\n\n    setSkip(amount: number) {\n        this.skip = amount;\n    }\n\n    createCopy() {\n        return new DatabaseQueryBuilder(this.query, this.sort, this.projection, this.limit, this.skip);\n    }\n}\n\nexport class Search {\n    queryS = ''\n    sortS = \"createdDate:desc\"\n    filterS\n    hitsPerPageS\n    pageS\n    private client\n    private index\n\n    constructor(index: SearchIndex, query?: string, sort?: string, filter?: string, hitsPerPage?: number, page?: number) {\n        (query) ? this.queryS = query : '';\n        (sort) ? this.sortS = sort : '';\n        this.filterS = filter;\n        this.hitsPerPageS = hitsPerPage;\n        this.pageS = page;\n\n        try {\n            this.client = new MeiliSearch({\n                host: 'http://localhost:7700',\n                apiKey: 'mccreations-search'\n            })\n\n            this.index = this.client.index(index);\n\n        } catch (error) {\n            sendLog(\"Meilisearch\", error)\n            console.error(error)\n        }\n\n    }\n\n    query(query: string, add: boolean) {\n        this.queryS = add ? `${this.queryS} ${query}` : query;\n    }\n\n    sort(attr: string, direction: \"asc\" | \"desc\") {\n        this.sortS = `${attr}:${direction}`;\n    }\n\n    filter(attr: string, operation: \"=\" | \">\" | \"<\" | \"!=\" | \"<=\" | \">=\", value: string | number, combiner?: \"AND\" | \"OR\") {\n        this.filterS = combiner ? `${this.filterS} ${combiner} ${attr}${operation}${value}` : `${attr} ${operation} ${value}`;\n    }\n\n    paginate(hitsPerPage: number, page: number) {\n        this.hitsPerPageS = hitsPerPage;\n        this.pageS = page;\n    }\n\n    execute() {\n        if(!this.client || !this.index) {\n            return;\n        }\n        let options: any = {}\n\n        if(this.hitsPerPageS) {\n            options.hitsPerPage = this.hitsPerPageS;\n            options.page = this.pageS\n        }\n\n        if(this.filterS) {\n            options.filter = this.filterS;\n        }\n\n        if(this.sortS) {\n            options.sort = [this.sortS];\n        }\n\n        return this.index.search(this.queryS, options)\n\n    }\n}","export function sendLog(from: string, e: any) {\n    try {\n        fetch(`https://api.mccreations.net/bamboo/v1/send-log`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: `Encountered error in ${from} \\n${new Error().stack} \\nError: ${e}`\n        })\n    } catch(e) {\n        console.error(e)\n    }\n}","import { Database } from \"../db/connect.js\";\nimport { ContentDocument } from \"../db/types.js\";\nimport { sendLog } from \"../logging/logging.js\";\n\nexport function rateContent(rating: number, content: ContentDocument) {\n    let database = new Database();\n    let totalRating = 0;\n    if(content.ratings) {\n        content.ratings.push(rating)\n    } else {\n        content.ratings = [rating];\n    }\n\n    for(let i = 0; i < content.ratings.length; i++) {\n        totalRating += content.ratings[i];\n    }\n\n    totalRating = totalRating/content.ratings.length\n    database.collection.updateOne({slug: content.slug}, {$push: {ratings: rating}, $set : {rating: totalRating}}).then(() => {\n        return totalRating\n    }).catch((error: any) => {\n        sendLog(\"rateContent\", error)\n        console.error(error)\n        return -1;\n    })\n}","import { app } from '../../index.js'\nimport { Database, DatabaseQueryBuilder, Search } from '../../db/connect.js';\nimport { getIdFromJWT, getUserFromJWT } from '../../auth/routes.js';\nimport { DatabaseCollection, ContentDocument as MapDoc, SearchIndex } from '../../db/types.js';\nimport { ObjectId } from 'mongodb';\nimport { sendLog } from '../../logging/logging.js';\nimport { UserTypes } from '../../auth/types.js';\nimport { findContent, performSearch } from '../searching.js';\n\nexport function initializeMapRoutes() {\n    app.get('/maps', async (req, res) => {\n        let result = await performSearch(SearchIndex.Maps, req.query)\n\t\tlet user = await getUserFromJWT(req.headers.authorization + \"\")\n\n\t\tresult.documents = result.documents.filter((map: MapDoc) => {\n\t\t\tif(map.status < 2) {\n\t\t\t\tif(user.user && map.creators) {\n\t\t\t\t\tfor(const creator of map.creators) {\n\t\t\t\t\t\tif(creator.handle === user.user.handle) return true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet id = getIdFromJWT(req.headers.authorization + \"\") as ObjectId\n\t\t\t\t\tif(id && id instanceof ObjectId && id.equals(map._id)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t})\n\n        if(req.query.sendCount && req.query.sendCount === \"true\") {\n            res.send({count: result.totalCount})\n        } else {\n            res.send(result);\n        }\n    })\n\n\tapp.get('/maps-nosearch', async (req, res) => {\n\t\tlet result = await findContent(DatabaseCollection.Maps, req.query, false)\n\t\tlet user = await getUserFromJWT(req.headers.authorization + \"\")\n\n\t\tresult.documents = result.documents.filter((map: MapDoc) => {\n\t\t\tif(map.status < 2) {\n\t\t\t\tif(user.user && map.creators) {\n\t\t\t\t\tif(user.user.type === UserTypes.Admin) return true;\n\t\t\t\t\tfor(const creator of map.creators) {\n\t\t\t\t\t\tif(creator.handle === user.user.handle) return true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet id = getIdFromJWT(req.headers.authorization + \"\") as ObjectId\n\t\t\t\t\tif(id && id instanceof ObjectId && id.equals(map._id)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t})\n\n        if(req.query.sendCount && req.query.sendCount === \"true\") {\n            res.send({count: result.totalCount})\n        } else {\n            res.send(result);\n        }\n\t})\n\n    app.get('/maps/:slug', async (req, res) => {\n        let result = await findContent(DatabaseCollection.Maps, {limit: 1, slug: req.params.slug}, false)\n\n\t\tif(result.documents[0] && result.documents[0].status < 1) {\n\t\t\tlet filter = true;\n\t\t\tif(req.headers.authorization) {\n\t\t\t\tlet uObj = await getUserFromJWT(req.headers.authorization)\n\t\t\t\tif(uObj.user && result.documents[0].creators) {\n\t\t\t\t\tfor(const creator of result.documents[0].creators) {\n\t\t\t\t\t\tif(creator.handle === uObj.user.handle) filter = false;\n\t\t\t\t\t}\n\t\t\t\t\tif(uObj.user.type === UserTypes.Admin) filter = false;\n\t\t\t\t} else {\n\t\t\t\t\tlet id = getIdFromJWT(req.headers.authorization) as ObjectId\n\t\t\t\t\tif(id && id instanceof ObjectId && id.equals(result.documents[0]._id)) {\n\t\t\t\t\t\tfilter = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(filter) {\n\t\t\t\tres.send({error: \"Map does not exist, or you do not have permission to view it\"})\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif(result.documents.length !== 1) {\n\t\t\tres.send({error: \"Map does not exist, or you do not have permission to view it\"})\n\t\t\treturn;\n\t\t}\n        res.send(result.documents[0])\n    })\n\n\tapp.get('/maps/:slug/download', async (req, res) => {\n        let result = await findContent(DatabaseCollection.Maps, {limit: 1, slug: req.params.slug}, false)\n\n        if(result.documents[0]) {\n            let map = result.documents[0]\n\n            let database = new Database();\n            database.collection.updateOne({_id: map._id}, {$inc: {downloads: 1}})\n\t\t\tres.sendStatus(200)\n\t\t\treturn\n        }\n\t\tres.sendStatus(404)\n    })\n\n\tapp.get('/maps/:slug/comments', async (req, res) => {\n\t\tlet result = await findContent(DatabaseCollection.Maps, {limit: 1, slug: req.params.slug}, false)\n\n        if(result.documents[0]) {\n            let map = result.documents[0]\n\t\t\tres.send({comments: map.comments})\n\t\t\treturn;\n\t\t}\n\t\tres.sendStatus(404)\n\t})\n\n\tapp.get('/maps/:slug/stats', async (req, res) => {\n\t\tlet result = await findContent(DatabaseCollection.Maps, {limit: 1, slug: req.params.slug}, false)\n\n        if(result.documents[0]) {\n            let map = result.documents[0]\n\t\t\tres.send({downloads: map.downloads, ratings: map.ratings, rating: map.rating, views: map.views})\n\t\t\treturn;\n\t\t}\n\t\tres.sendStatus(404)\n\t})\n\n\tapp.get('/get_map_tags', async (req, res) => {\n\t\tres.send({\n\t\t\tgenre: [\n\t\t\t\t\"adventure\",\n\t\t\t\t\"parkour\",\n\t\t\t\t\"survival\",\n\t\t\t\t\"puzzle\",\n\t\t\t\t\"game\",\n\t\t\t\t\"build\"\n\t\t\t],\n\t\t\tsubgenre: [\n\t\t\t\t\"horror\",\n\t\t\t\t\"PVE\",\n\t\t\t\t\"PVP\",\n\t\t\t\t\"episodic\",\n\t\t\t\t\"challenge\",\n\t\t\t\t'CTM',\n\t\t\t\t\"RPG\",\n\t\t\t\t\"trivia\",\n\t\t\t\t\"escape\",\n\t\t\t\t\"finding\",\n\t\t\t\t\"maze\",\n\t\t\t\t\"unfair\",\n\t\t\t\t\"dropper\",\n\t\t\t\t\"elytra\",\n\t\t\t\t\"city\",\n\t\t\t\t\"park\",\n\t\t\t\t\"multiplayer\",\n\t\t\t\t\"singleplayer\",\n\t\t\t\t\"co-op\"\n\t\t\t],\n\t\t\tdifficulty: [\n\t\t\t\t\"chill\",\n\t\t\t\t\"easy\",\n\t\t\t\t\"normal\",\n\t\t\t\t\"hard\",\n\t\t\t\t\"hardcore\"\n\t\t\t],\n\t\t\ttheme: [\n\t\t\t\t\"medieval\",\n\t\t\t\t\"modern\",\n\t\t\t\t\"fantasy\",\n\t\t\t\t\"sci-fi\",\n\t\t\t\t\"realistic\",\n\t\t\t\t\"vanilla\"\n\t\t\t],\n\t\t\tlength: [\n\t\t\t\t\"short\",\n\t\t\t\t\"medium\",\n\t\t\t\t\"long\"\n\t\t\t],\n\n\t\t})\n\t})\n}\n\n","import { app } from \"../index.js\";\nimport bcrypt from \"bcrypt\";\nimport { AuthError, Providers, User, UserTypes } from \"./types.js\";\nimport { Database, DatabaseQueryBuilder } from \"../db/connect.js\";\nimport { Request } from \"express\";\nimport { ObjectId } from \"mongodb\";\nimport jwt from 'jsonwebtoken'\nimport { upload } from \"../s3/upload.js\";\nimport { forgotPasswordEmail } from \"../email/email.js\";\nimport { sendLog } from \"../logging/logging.js\";\nimport { get } from \"http\";\nconst saltRounds = 10;\nexport let JWTKey = \"literally1984\"\n\nexport function initializeAuthRoutes() {\n    // Get a user from a JWT token sent in the authorization header\n    app.get('/auth/user', async (req, res) => {\n        if(req.headers.authorization) {\n            res.send(await getUserFromJWT(req.headers.authorization));\n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n\n    })\n\n\n    // app.get('/auth/user/creators', async (req, res) => {\n    //     if(req.headers.authorization) {\n    //         let user = await getUserFromJWT(req.headers.authorization)\n    //         if('user' in user && user.user) {\n    //             let creators = [user.user]\n    //             let database = new Database('content', 'creators')\n    //             let cursor = await database.collection.find<User>({'owners': user.user.handle})\n    //             creators = [...creators, ...await cursor.toArray()]\n    //             res.send({creators: creators})\n    //         } else {\n    //             res.send({error: \"You are not allowed to access this resource\"})\n    //         }\n    //     } else {\n    //         console.log(\"authorization not sent\")\n    //         res.send({error: \"You are not allowed to access this resource\"})\n    //     }\n    // })\n\n    // Delete a user\n    app.delete('/auth/user', async (req, res) => {\n        if(req.headers.authorization) {\n            try {\n                let user = await getUserFromJWT(req.headers.authorization)\n                if(user && user.user) {\n                    let database = new Database(\"content\", \"creators\")\n                    let result = await database.collection.deleteOne({_id: user.user._id})\n                    if(result.acknowledged && result.deletedCount === 1) {\n                        res.sendStatus(200)\n                    } else {\n                        res.send({error: \"User not found\"})\n                    }\n                } else {\n                    console.log(\"Token not in JWT\")\n                    res.send({error: \"Session expired, please sign in and try again\"})\n                }\n            } catch(err) {\n                sendLog(\"delete user\", err)\n                console.log(\"JWT not verified \" + err)\n                res.send({error: \"Session expired, please sign in and try again\"})\n            }\n            \n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n    })\n\n    // Update a user's profile (username, icon, banner, about)\n    app.post('/auth/user/updateProfile', async (req, res) => {\n        if(req.headers.authorization) {\n            try {\n                let user = await getUserFromJWT(req.headers.authorization)\n                if(user && user.user) {\n                    let database = new Database(\"content\", \"creators\")\n                    \n                    if(req.body.banner && req.body.banner.length > 1) {\n                        await database.collection.updateOne({_id: user.user._id}, {$set: {bannerURL: req.body.banner}})\n                    }\n\n                    if(req.body.icon && req.body.icon.length > 1) {\n                        await database.collection.updateOne({_id: user.user._id}, {$set: {iconURL: req.body.icon}})\n                    }\n\n                    if(req.body.username && req.body.username.length > 1) {\n                        await database.collection.updateOne({_id: user.user._id}, {$set: {username: req.body.username}})\n                    }\n\n                    if(req.body.about && req.body.about.length > 1) {\n                        await database.collection.updateOne({_id: user.user._id}, {$set: {about: req.body.about}})\n                    }\n\n                    res.sendStatus(200)\n\n                } else {\n                    console.log(\"Token not in JWT\")\n                    res.send({error: \"Session expired, please sign in and try again\"})\n                }\n            } catch(err) {\n                sendLog(\"updateProfile\", err)\n                console.log(\"JWT not verified\")\n                res.send({error: \"Session expired, please sign in and try again\"})\n            }\n            \n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n    })\n\n    // Update a user's handle\n    app.post('/auth/user/updateHandle', async (req, res) => {\n        if(req.headers.authorization) {\n            try {\n                let user = await getUserFromJWT(req.headers.authorization)\n                if(user && user.user) {\n                    // Change handle\n                    let database = new Database(\"content\", \"creators\")\n                    let existingUser = await database.collection.findOne({handle: req.body.handle})\n                    if(existingUser) {\n                        res.send({error: \"Another account is already using that handle\"})\n                        return;\n                    }\n                    await database.collection.updateOne({_id: user.user._id}, {$set: {handle: req.body.handle}})\n\n                    // Update handle in all content\n                    database = new Database(\"content\", \"Maps\")\n                    await database.collection.updateMany({\"creators.handle\": user.user.handle}, {$set: {\"creators.$.handle\": req.body.handle}})\n\n                    database = new Database(\"content\", \"datapacks\")\n                    await database.collection.updateMany({\"creators.handle\": user.user.handle}, {$set: {\"creators.$.handle\": req.body.handle}})\n\n                    database = new Database(\"content\", \"resourcepacks\")\n                    await database.collection.updateMany({\"creators.handle\": user.user.handle}, {$set: {\"creators.$.handle\": req.body.handle}})\n\n                    database = new Database(\"content\", \"comments\")\n                    await database.collection.updateMany({\"handle\": user.user.handle}, {$set: {\"handle\": req.body.handle}})\n                    res.sendStatus(200)\n                } else {\n                    console.log(\"Token not in JWT\")\n                    res.send({error: \"Session expired, please sign in and try again\"})\n                }\n            } catch(err) {\n                sendLog(\"updateHandle\", err)\n                console.log(\"JWT not verified\")\n                res.send({error: \"Session expired, please sign in and try again\"})\n            }\n            \n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n    })\n\n    // Update a user's email\n    app.post('/auth/user/updateEmail', async (req, res) => {\n        if(req.headers.authorization) {\n            try {\n                let user = await getUserFromJWT(req.headers.authorization)\n                if(user && user.user) {\n                    let database = new Database(\"content\", \"creators\")\n                    let existingUser = await database.collection.findOne({email: req.body.email})\n                    if(existingUser) {\n                        res.send({error: \"Another account is already using that email\"})\n                        return;\n                    }\n                    await database.collection.updateOne({_id: user.user._id}, {$set: {email: req.body.email, last_important_update: Date.now()}})\n                    res.sendStatus(200)\n                } else {\n                    console.log(\"Token not in JWT\")\n                    res.send({error: \"Session expired, please sign in and try again\"})\n                }\n            } catch(err) {\n                sendLog(\"updateEmail\", err)\n                console.log(\"JWT not verified\")\n                res.send({error: \"Session expired, please sign in and try again\"})\n            }\n            \n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n    })\n\n    // Update a user's password\n    app.post('/auth/user/updatePassword', async (req, res) => {\n        if(req.headers.authorization) {\n            try {\n                let user = await getUserFromJWT(req.headers.authorization)\n                if(user && user.user) {\n                    let database = new Database(\"content\", \"creators\")\n                    bcrypt.hash(req.body.password, saltRounds, async (err, hash) => {\n                        if(err) {\n                            res.send({error: \"There was an error resetting your password\"})\n                            return;\n                        }\n                        await database.collection.updateOne({_id: user.user._id}, {$set: {password: hash, last_important_update: Date.now()}})\n                        res.sendStatus(200)\n                    })\n                } else {\n                    console.log(\"Token not in JWT\")\n                    res.send({error: \"Session expired, please sign in and try again\"})\n                }\n            } catch(err) {\n                sendLog(\"updatePassword\", err)\n                console.log(\"JWT not verified\")\n                res.send({error: \"Session expired, please sign in and try again\"})\n            }\n            \n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n    })\n\n    app.post('/auth/resetPassword', async (req, res) => {\n        if(req.headers.authorization) {\n            try {\n                let user = await getUserFromJWT(req.headers.authorization)\n                if(user && user.user) {\n                    let database = new Database(\"content\", \"creators\")\n                    if(user && req.body.password) { \n                        bcrypt.hash(req.body.password, saltRounds, async (err, hash) => {\n                            if(err) {\n                                console.error(err)\n                                res.send({error: \"There was an error resetting your password\"})\n                                return;\n                            }\n\n                            await database.collection.updateOne( {_id: user.user._id}, {\"$set\": { password: hash, last_important_update: Date.now() } } )\n                            res.sendStatus(200)\n                        })\n                    } else {\n                        res.send({error: \"User not found; Please request a new reset email\"})\n                    }\n                } else {\n                    console.log(\"Token not in JWT\")\n                    res.send({error: \"Token expired; Please request a new reset email\"})\n                }\n            } catch(e) {\n                sendLog(\"resetPassword\", e)\n                console.log(\"JWT not verified\")\n                res.send({error: \"Token expired; Please request a new reset email\"})\n            }\n        } else {\n            console.log(\"authorization not sent\")\n            res.send({error: \"You are not allowed to access this resource\"})\n        }\n    })\n\n    app.post('/auth/forgotPassword', async (req, res) => {\n        if(req.body.email) {\n            let database = new Database(\"content\", \"creators\")\n            let user = await database.collection.findOne({email: req.body.email})\n            if(user) {\n                forgotPasswordEmail(req.body.email, jwt.sign({_id: user._id}, JWTKey, { expiresIn: \"30min\"}))\n                res.sendStatus(200)\n            } else {\n                res.send({error: \"User not found\"})\n            }\n        } else {\n            res.send({error: \"Email address not provided\"})\n        }\n    })\n\n    app.post('/auth/signUpWithEmail', async (req, res) => {\n        let user = req.body as User\n        let database = new Database(\"content\", \"creators\")\n\n        if(!user.password) {\n            res.send({error: \"No password provided\"});\n            return;\n        }\n\n        let existingUser = await database.collection.findOne({email: user.email})\n        if(existingUser) {\n            res.send({error: \"Email already in use\"})\n            return;\n        }\n\n        bcrypt.hash(user.password, saltRounds, async (err, hash) => {\n            if(err) {\n                res.send({error: \"There was an error creating your account, please try again\"})\n                return;\n            }\n\n            user.password = undefined;\n            user.password = hash;\n            user.type = UserTypes.Account,\n            user.iconURL = \"https://next.mccreations.net/mcc_no_scaffold.png\"\n\n            existingUser = await database.collection.findOne({handle: user.username})\n            if(existingUser) {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\") + Math.floor(Math.random() * 10000)\n            }\n            else {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\");\n            }\n\n            user.email = user.email.toLowerCase()\n\n            await database.collection.insertOne(user)\n            res.send(200)\n        })\n    })\n\n    app.post('/auth/signInWithEmail', async (req, res) => {\n        let user = req.body as User\n        let database = new Database(\"content\", \"creators\")\n\n        if(!user.password) {\n            res.send({error: \"No password provided\"});\n            return;\n        }\n\n        let existingUser = await database.collection.findOne({email: user.email})\n        if(!existingUser) {\n            res.send({error: \"Incorrect email address or password\"})\n            return;\n        }\n\n        if(!existingUser.password) {\n            res.send({error: \"Incorrect email address or password\"})\n            return;\n        }\n        bcrypt.compare(user.password, existingUser.password, (err, same) => {\n            if(same) {\n                console.log(\"user login successful\")\n                res.send({token: jwt.sign({_id: existingUser!._id, createdDate: Date.now()}, JWTKey, {expiresIn: '31d'}), creator: {username: existingUser!.username, handle: existingUser!.handle}})\n            } else {\n                res.send({error: \"Incorrect email address or password\"})\n            }\n        })\n    })\n\n    app.post('/auth/signInWithDiscord', async (req, res) => {\n        let result = await signInWithDiscord(req.query.code as string)\n        if(instanceOfUser(result)) {\n            result = result as User;\n            res.send({token: jwt.sign({_id: result._id, createdDate: Date.now()}, JWTKey, {expiresIn: '31d'}), creator: {username: result.username}})\n        } else {\n            console.log(result)\n            res.send(result)\n            // res.sendStatus(500)\n        }\n    })\n\n    app.post('/auth/signInWithGithub', async (req, res) => {\n        let result = await signInWithGithub(req.query.code as string)\n        if(instanceOfUser(result)) {\n            result = result as User\n            res.send({token: jwt.sign({_id: result._id, createdDate: Date.now()}, JWTKey, {expiresIn: '31d'}), creator: {username: result.username, handle: result.handle}})\n        } else {\n            console.log(result)\n            res.send(result)\n            // res.sendStatus(500)\n        }\n    })\n\n    app.post('/auth/signInWithGoogle', async (req, res) => {\n        let result = await signInWithGoogle(req.query.access_token as string);\n        if(instanceOfUser(result)) {\n            result = result as User\n            res.send({token: jwt.sign({_id: result._id, createdDate: Date.now()}, JWTKey, {expiresIn: '31d'}), creator: {username: result.username, handle: result.handle}})\n        } else {\n            console.log(result)\n            res.send(result)\n        }\n    })\n\n    app.post('/auth/signInWithMicrosoft', async (req, res) => {\n        let result = await signInWithMicrosoft(req.query.code as string);\n        if(instanceOfUser(result)) {\n            result = result as User\n            res.send({token: jwt.sign({_id: result._id, createdDate: Date.now()}, JWTKey, {expiresIn: '31d'}), creator: {username: result.username, handle: result.handle}})\n        } else {\n            console.log(result)\n            res.send(result)\n        }\n    })\n}\n\nasync function signInWithDiscord(code: string): Promise<User | AuthError> {\n    let res = await fetch('https://discord.com/api/oauth2/token', {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n            'client_id': \"882869275063386153\",\n            'client_secret': \"iRLt58vpsYscUVpePGAurWaWgnXNucfB\",\n            code,\n            'grant_type': 'authorization_code',\n            'redirect_uri': 'https://next.mccreations.net/auth/oauth_handler?provider=discord',\n            'scope': 'identify+email'\n        }).toString(),\n        method: 'POST'\n    })\n    let data = await res.json();\n    let access_token = data.access_token;\n    let token_type = data.token_type\n    let refresh_token = data.refresh_token\n\n    if(!access_token) return {error: \"Access token was not received \"}\n\n    res = await fetch('https://discord.com/api/users/@me', {\n        headers: {\n            authorization: `${token_type} ${access_token}`\n        }\n    })\n    let discordUser = await res.json();\n    if(!discordUser) return {error: \"Discord user could not be fetched\"}\n\n    const database = new Database(\"content\", \"creators\")\n\n    let existingUser = await database.collection.findOne<User>({ \"providers.id\": discordUser.id})\n    if(existingUser) {\n        existingUser.providers?.forEach(provider => {\n            if(provider.provider === Providers.Discord) {\n                provider.token = access_token,\n                provider.refreshToken = refresh_token\n            }\n        })\n        return existingUser\n    } else {\n        existingUser = await database.collection.findOne<User>({email: discordUser.email})\n        if(existingUser) {\n            return {error: \"User already exists but is using a different provider\"}\n        } else {\n            let user: User = {\n                username: discordUser.global_name,\n                email: discordUser.email,\n                type: UserTypes.Account,\n                iconURL: `https://cdn.discordapp.com/avatars/${discordUser.id}/${discordUser.avatar}`,\n                bannerURL: `https://cdn.discordapp.com/banners/${discordUser.id}/${discordUser.banner}`,\n                providers: [\n                    {\n                        provider: Providers.Discord,\n                        token: access_token,\n                        refreshToken: refresh_token,\n                        id: discordUser.id\n                    }\n                ]\n            }\n\n            existingUser = await database.collection.findOne<User>({handle: user.username})\n            if(existingUser) {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\") + Math.floor(Math.random() * 10000)\n            }\n            else {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\");\n            }\n            await database.collection.insertOne(user)\n            return user\n        }\n    }\n}\n\nasync function signInWithGithub(code: string): Promise<User | AuthError>  {\n    let githubParams = new URLSearchParams({\n        client_id: \"d8fb2f8d7b4f8f88c320\",\n        client_secret: \"5b24a7011c4db6ba6b5feec392e5f21103ea8225\",\n        code: code,\n        scope: \"user:email,read:user\"\n    })\n    let res = await fetch(`https://github.com/login/oauth/access_token?${githubParams.toString()}`, {\n        headers: {\n            'Accept': 'application/json'\n        },\n        method: 'POST'\n    })\n\n    let data = await res.json();\n    console.log(data)\n    // console.log(data.access_token)\n    let access_token = data.access_token;\n    let token_type = data.token_type\n\n    if(!access_token) return {error: \"Access token was not received \"}\n\n    res = await fetch('https://api.github.com/user', {\n        headers: {\n            authorization: `${token_type} ${access_token}`\n        }\n    })\n    let githubUser = await res.json();\n    if(!githubUser) return {error: \"Github user could not be fetched\"}\n\n    const database = new Database(\"content\", \"creators\")\n\n    let existingUser = await database.collection.findOne<User>({ \"providers.id\": githubUser.id})\n    if(existingUser) {\n        existingUser.providers?.forEach(provider => {\n            if(provider.provider === Providers.Github) {\n                provider.token = access_token\n            }\n        })\n        return existingUser\n    } else {\n        existingUser = await database.collection.findOne<User>({email: githubUser.email})\n        if(existingUser && githubUser.email) {\n            return {error: \"User already exists but is using a different provider\"}\n        } else {\n            let user: User = {\n                username: githubUser.login,\n                email: githubUser.email,\n                type: UserTypes.Account,\n                iconURL: githubUser.avatar_url,\n                providers: [\n                    {\n                        provider: Providers.Github,\n                        token: access_token,\n                        refreshToken: \"\",\n                        id: githubUser.id\n                    }\n                ]\n            }\n\n            existingUser = await database.collection.findOne<User>({handle: user.username})\n            if(existingUser) {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\") + Math.floor(Math.random() * 10000)\n            }\n            else {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\");\n            }\n            await database.collection.insertOne(user)\n            return user\n        }\n    }\n}\n\nasync function signInWithGoogle(access_token: string): Promise<User | AuthError> {\n    let res = await fetch(\"https://www.googleapis.com/oauth2/v2/userinfo\", {\n        headers: {\n            authorization: \"Bearer \" + access_token\n        }\n    })\n    let data = await res.json();\n    \n    const database = new Database(\"content\", \"creators\")\n\n    let existingUser = await database.collection.findOne<User>({ \"providers.id\": data.id})\n    if(existingUser) {\n        existingUser.providers?.forEach(provider => {\n            if(provider.provider === Providers.Github) {\n                provider.token = access_token\n            }\n        })\n        return existingUser\n    } else {\n        existingUser = await database.collection.findOne<User>({email: data.email})\n        if(existingUser && data.email) {\n            return {error: \"User already exists but is using a different provider\"}\n        } else {\n            let user: User = {\n                username: data.name,\n                email: data.email,\n                type: UserTypes.Account,\n                iconURL: data.picture,\n                providers: [\n                    {\n                        provider: Providers.Google,\n                        token: access_token,\n                        refreshToken: \"\",\n                        id: data.id\n                    }\n                ]\n            }\n\n            existingUser = await database.collection.findOne<User>({handle: user.username})\n            if(existingUser) {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\") + Math.floor(Math.random() * 10000)\n            }\n            else {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\");\n            }\n\n            await database.collection.insertOne(user)\n\n            return user\n        }\n    }\n}\n\nasync function signInWithMicrosoft(code: string): Promise<User | AuthError> {\n    let res = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n            'client_id': \"f4c0f386-febc-4e8e-b0d5-20a99b4d0667\",\n            'client_secret': \"Rao8Q~FVIUeFC7PbsB0MqEhbReoKbUtcrCJnqdos\",\n            'code': code,\n            'grant_type': 'authorization_code',\n            'redirect_uri': 'https://next.mccreations.net/auth/oauth_handler',\n            'scope': 'openid email profile'\n        }).toString(),\n        method: 'POST'\n    })\n    let data = await res.json();\n    let access_token = data.access_token;\n    let token_type = data.token_type\n\n    res = await fetch('https://graph.microsoft.com/oidc/userinfo', {\n        headers: {\n            authorization: `${token_type} ${access_token}`\n        }\n    })\n    let microsoftUser = await res.json();\n    if(!microsoftUser) return {error: \"Github user could not be fetched\"}\n\n    const database = new Database(\"content\", \"creators\")\n\n    let existingUser = await database.collection.findOne<User>({ \"providers.id\": microsoftUser.sub})\n    if(existingUser) {\n        existingUser.providers?.forEach(provider => {\n            if(provider.provider === Providers.Github) {\n                provider.token = access_token\n            }\n        })\n        return existingUser\n    } else {\n        existingUser = await database.collection.findOne<User>({email: microsoftUser.email})\n        if(existingUser && microsoftUser.email) {\n            return {error: \"User already exists but is using a different provider\"}\n        } else {\n            let user: User = {\n                username: microsoftUser.name,\n                email: microsoftUser.email,\n                type: UserTypes.Account,\n                providers: [\n                    {\n                        provider: Providers.Microsoft,\n                        token: access_token,\n                        refreshToken: \"\",\n                        id: microsoftUser.sub\n                    }\n                ]\n            }\n\n            existingUser = await database.collection.findOne<User>({handle: user.username})\n            if(existingUser) {\n                user.handle = (user.username.toLowerCase() + Math.floor(Math.random() * 10000)).replace(\" \", \"-\")\n            }\n            else {\n                user.handle = user.username.toLowerCase().replace(\" \", \"-\");\n            }\n\n            await database.collection.insertOne(user)\n\n            return user\n        }\n    }\n}\n\nexport async function getUserFromJWT(jwtString: string) {\n    try {\n        let token = jwt.verify(jwtString, JWTKey) as any\n        if(token && token._id) {\n            let _id = new ObjectId(token._id)\n            let database = new Database(\"content\", \"creators\")\n            let query = new DatabaseQueryBuilder()\n            query.buildQuery(\"_id\", _id);\n            query.setProjection({\n                password: 0,\n                providers: 0\n            })\n            let cursor = await database.executeQuery(query);\n            let user = await cursor.next() as User;\n            if(user && ((user.last_important_update && token.createdDate && user.last_important_update < token.createdDate) || !user.last_important_update)) {\n                return {user: user} \n            } else {\n                console.log(\"User not found\")\n                return {error: \"Session expired, please sign in and try again\"}\n            }\n        } else {\n            console.log(\"Token not in JWT\")\n            return {error: \"Session expired, please sign in and try again\"} \n        }\n    } catch(err) {\n        sendLog(\"getUserFromJWT\", err + \"\\n JWT: \" + jwtString)\n        console.log(\"JWT not verified\")\n        return {error: \"Session expired, please sign in and try again\"} \n    }\n}\n\nexport function getIdFromJWT(jwtString: string) {\n    console.log(jwtString)\n    try {\n        let token = jwt.verify(jwtString, JWTKey) as any\n        if(token && token._id) {\n            return new ObjectId(token._id)\n        }\n    } catch(e) {\n        sendLog(\"getIdFromJWT\", e + \"\\n JWT: \" + jwtString)\n        console.log('JWT Error: ' + e);\n        return {error: \"Session expired, please sign in and try again\"}\n    }\n}\n\nfunction instanceOfUser(object: any) {\n    return 'username' in object\n}\n\nexport async function refreshJWTHash() {\n    JWTKey = (await crypto.getRandomValues(new Uint8Array(256))).join(\"\")\n}","import { ObjectId } from \"mongodb\"\n\nexport interface User {\n    _id?: ObjectId\n    type: UserTypes\n    username: string,\n    email: string,\n    password?: string,\n    handle?: string,\n    iconURL?: string\n    about?: string,\n    bannerURL?: string,\n    socialLinks?: {\n        link: string,\n        name: string\n    },\n    providers?: Provider[],\n    owners?: string[],\n    last_important_update?: Date\n}\n\nexport interface Provider {\n    provider: Providers,\n    token: string,\n    refreshToken: string\n    id: string\n}\n\nexport enum Providers {\n    Discord,\n    Google,\n    Microsoft,\n    Github,\n    Steam,\n    Apple\n}\n\nexport enum UserTypes {\n    Account,\n    Creator,\n    Admin\n}\n\nexport interface AuthError {\n    error: string\n}","import FormData from 'form-data';\n// import Mailgun from 'mailgun.js';\nimport { sendLog } from '../logging/logging.js';\nimport Mail from '@sendgrid/mail';\nMail.setApiKey(process.env.SENDGRID_API_KEY + \"\");\n\nexport function approvedEmail(to: string, link: string, title: string) {\n    Mail.send({\n        to: to,\n        from: 'MCCreations <mail@mccreations.net>',\n        subject: title + \" Has Been Approved!\",\n        content: [\n            {\n                type: 'text/html',\n                value: \"blank\"\n            }\n        \n        ],\n        templateId: \"d-567ca9ab875542f6b34d7ac064865a7d\",\n        dynamicTemplateData: {\n            contentLink: link,\n            contentTitle: title\n        }\n    })\n}\n\nexport function forgotPasswordEmail(to: string, resetToken: string) {\n    Mail.send({\n        to: to,\n        from: 'MCCreations <mail@mccreations.net>',\n        content: [\n            {\n                type: 'text/html',\n                value: \"blank\"\n            }\n        \n        ],\n        templateId: \"d-2d2de0fcb0a94ccc884cf71bd3ff4a7d\",\n        dynamicTemplateData: {\n            email: to,\n            resetLink: \"https://next.mccreations.net/reset_password?token=\" + resetToken\n        }\n    })\n}\n\nexport function requestApprovalEmail(link: string) {\n    Mail.send({\n        to: \"crazycowmm@gmail.com\",\n        from: 'MCCreations <mail@mccreations.net>',\n        content: [\n            {\n                type: 'text/html',\n                value: \"blank\"\n            }\n        \n        ],\n        templateId: \"d-ae90ac85d7f643b89b5321ebb44756d3\",\n        dynamicTemplateData: {\n            previewContent: link\n        }\n    })\n}\n\n// const mailgun = new Mailgun.default(FormData)\n// const mg = mailgun.client({username: 'api', key: process.env.MAILGUN_KEY + \"\"})\n\n\n// export function email(to: string, subject:string, content: string) {\n//     mg.messages.create('mail.mccreations.net', {\n//         from: 'MCCreations <no-reply@mccreations.net>',\n//         to: to,\n//         subject: subject,\n//         text: content\n//     })\n// }\n\n// function sendEmailTemplate(to: string, template: string, subject: string, variables: any) {\n//     mg.messages.create('mail.mccreations.net', {\n//         from: 'MCCreations <no-reply@mccreations.net>',\n//         to: to,\n//         subject: subject,\n//         template: template,\n//         \"t:email\": to,\n//         't:variables': JSON.stringify(variables)\n//     }).catch(e => {\n//         throw e;\n//     })\n// }\n\n// export function forgotPasswordEmail(to: string, resetToken: string) {\n//     try {\n//         sendEmailTemplate(to, \"forgot_password\", \"Password Reset for \" + to, {\n//                 email: to,\n//                 resetLink: \"https://next.mccreations.net/reset_password?token=\" + resetToken\n//             })\n//     } catch (e) {\n//         sendLog(\"forgotPasswordEmail\", e)\n//         throw e;\n//     }\n// }\n\n// export function requestApprovalEmail(link: string) {\n//     try {\n//         sendEmailTemplate(\"crazycowmm@gmail.com\", \"request_approval\", \"New Map Requesting Approval\", {\n//             previewContent: link\n//         })\n//     } catch(e) {\n//         sendLog(\"requestApprovalEmail\", e)\n//         console.log(e)\n//     }\n// }\n\n// export function approvedEmail(to: string, link: string, title: string) {\n//     try {\n//         sendEmailTemplate(to, \"approved\", title + \" Has Been Approved!\", {\n//             contentLink: link,\n//             contentTitle: title\n//         })\n//     } catch(e) {\n//         sendLog(\"approvedEmail\", e)\n//         console.log(e)\n//     }\n// }","import { Document, Filter, ObjectId, Sort } from \"mongodb\"\n\nexport interface IDatabaseQuery {\n    query: Filter<Document>,\n    limit: number,\n    skip: number,\n    sort: Sort,\n    projection: IDatabaseProjection\n}\n\nexport interface IInlineCreator {\n    username: string,\n    handle?: string\n\n}\n\nexport interface ContentDocument extends Document {\n    comments?: [{username?: string, comment?: string}],\n    creators?: IInlineCreator[],\n    slug: string,\n    rating: number,\n    ratings?: number[],\n    createdDate: Date,\n    updatedDate?: Date,\n    _id?: ObjectId,\n    tags?: string[],\n    description: string,\n    files?: File[]\n    images: string[],\n    shortDescription: string,\n    status: number,\n    title: string,\n    videoUrl?: string,\n    downloads: number,\n    views: number,\n    importedUrl?: string,\n}\n\nexport interface File {\n    type: string,\n    worldUrl: string,\n    resourceUrl?: string,\n    dataUrl?: string,\n    minecraftVersion: string,\n    contentVersion?: string\n    changelog?: string\n}\n\nexport interface IDatabaseProjection {\n    _id: number,\n    title: number,\n    \"files.minecraftVersion\": number,\n    shortDescription: number,\n    downloads: number,\n    rating: 1,\n    \"creators.username\": number,\n    images: number,\n    slug: number\n}\n\nexport enum SearchIndex {\n    Maps = \"maps\",\n    Datapacks = \"datapacks\",\n    Resourcepacks = \"resourcepacks\",\n}\n\nexport enum DatabaseCollection {\n    Maps = \"Maps\",\n    Datapacks = \"datapacks\",\n    Resourcepacks = \"resourcepacks\"\n}","import { Database, DatabaseQueryBuilder, Search } from \"../db/connect.js\";\nimport { ContentDocument, DatabaseCollection, SearchIndex } from \"../db/types.js\";\nimport { sendLog } from \"../logging/logging.js\";\n\nexport async function findContent(collection: DatabaseCollection, requestQuery: any, useProjection: boolean) {\n    let database = new Database(\"content\", collection);\n    let query = new DatabaseQueryBuilder();\n\n\tswitch(requestQuery.sort) {\n\t\tcase \"newest\":\n\t\t\tquery.buildSort(\"createdDate\", -1)\n\t\t\tbreak;\n\t\tcase \"updated\":\n            query.buildSort(\"updatedDate\", -1)\n\t\t\tbreak;\n\t\tcase \"title_ascending\": \n            query.buildSort(\"title\", 1)\n\t\t\tbreak;\n\t\tcase \"title_descending\":\n            query.buildSort(\"title\", -1)\n\t\t\tbreak;\n\t\tcase \"oldest\":\n            query.buildSort(\"createdDate\", 1)\n\t\t\tbreak;\n\t\tcase \"highest_rated\": \n            query.buildSort(\"rating\", -1)\n\t\t\tbreak;\n\t\tcase \"lowest_rated\":\n\t\t\tquery.buildSort(\"rating\", 1)\n\t\t\tbreak;\n\t\tcase \"creator_ascending\":\n\t\t\tquery.buildSort(\"creators.username\", 1)\n\t\t\tbreak;\n\t\tcase \"creator_descending\":\n\t\t\tquery.buildSort(\"creators.username\", -1)\n\t\t\tbreak;\n\t\t// case \"best_match\": \n\t\t// \tsort = {score: {$meta: \"textScore\"}}\n\t\t// \tbreak;\n\t\tdefault:\n\t\t\tquery.buildSort(\"createdDate\", -1)\n\t}\n\n\tif(requestQuery.status && (!requestQuery.exclusiveStatus || requestQuery.exclusiveStatus === \"false\")) {\n\t\tconsole.log(requestQuery.status)\n        query.buildQueryWithOperation(\"status\", Number.parseInt(requestQuery.status), \"$gte\")\n\t} else if (requestQuery.status) {\n\t\tquery.buildQuery(\"status\", Number.parseInt(requestQuery.status))\n\t}\n\n\tif(requestQuery.version) {\n        requestQuery.version.replace(\".0\", \"\")\n        query.buildQuery(\"files.minecraftVersion\", requestQuery.version)\n\t}\n\n\tif(requestQuery.search && requestQuery.search.length > 3 && !(requestQuery.search === \"undefined\" || requestQuery.search === \"null\")) {\n        query.buildQueryWithOperation(\"$text\", requestQuery.search, \"$search\")\n\t}\n\n    if(requestQuery.slug) {\n        query.buildQuery(\"slug\", requestQuery.slug)\n    }\n\n\tif(requestQuery.limit) {\n\t\tquery.setLimit(Number.parseInt(requestQuery.limit))\n\t} else {\n\t\trequestQuery.setLimit(20)\n\t}\n\n\tif(query.limit === 0) {\n\t\tquery.setLimit(20)\n\t}\n\n\tif(requestQuery.page) {\n\t\tif(requestQuery.page < 0) {\n\t\t\trequestQuery.page = \"0\"\n\t\t}\n\t\tquery.setSkip(Number.parseInt(requestQuery.page) * query.limit);\n\t}\n\n    if(requestQuery.creator) {\n        query.buildQuery(\"creators.handle\", requestQuery.creator)\n    }\n\n\tconst projection = {\n\t\ttitle: 1,\n\t\t// score: { $meta: \"textScore\" },\n\t\t\"files.minecraftVersion\": 1,\n\t\tshortDescription: 1,\n\t\tdownloads: 1,\n\t\tviews: 1,\n\t\trating: 1,\n\t\tcreators: 1,\n\t\timages: 1,\n\t\tslug: 1,\n\t\tcreatedDate: 1,\n\t\tstatus: 1\n\t};\n\n\tif(useProjection)\n    \tquery.setProjection(projection);\n\n\tlet count = await database.collection.countDocuments(query.query)\n\n\tlet cursor = database.executeQuery(query);\n\n\tlet documents = []\n\tfor await (const doc of cursor) {\n\t\tdocuments.push(doc);\n\t}\n\tlet result: {totalCount: number, documents: ContentDocument[]} = {\n\t\ttotalCount: count,\n\t\tdocuments: documents as ContentDocument[]\n\t}\n\treturn result;\n}\n\nexport async function performSearch(index: SearchIndex, requestQuery: any) {\n\tlet search = new Search(index);\n\n\tswitch(requestQuery.sort) {\n\t\tcase \"newest\":\n\t\t\tsearch.sort(\"createdDate\", \"desc\")\n\t\t\tbreak;\n\t\tcase \"updated\":\n\t\t\tsearch.sort(\"updatedDate\", \"desc\")\n\t\t\tbreak;\n\t\tcase \"title_ascending\": \n\t\t\tsearch.sort(\"title\", \"asc\")\n\t\t\tbreak;\n\t\tcase \"title_descending\":\n\t\t\tsearch.sort(\"title\", \"desc\")\n\t\t\tbreak;\n\t\tcase \"oldest\":\n\t\t\tsearch.sort(\"createdDate\", \"asc\")\n\t\t\tbreak;\n\t\tcase \"highest_rated\": \n\t\t\tsearch.sort(\"rating\", \"desc\")\n\t\t\tbreak;\n\t\tcase \"lowest_rated\":\n\t\t\tsearch.sort(\"rating\", \"asc\")\n\t\t\tbreak;\n\t\tcase \"creator_ascending\":\n\t\t\tsearch.sort(\"creators.username\", \"asc\")\n\t\t\tbreak;\n\t\tcase \"creator_descending\":\n\t\t\tsearch.sort(\"creators.username\", \"desc\")\n\t\t\tbreak;\n\t\t// case \"best_match\": \n\t\t// \tsort = {score: {$meta: \"textScore\"}}\n\t\t// \tbreak;\n\t\tdefault:\n\t\t\tsearch.sort(\"createdDate\", \"desc\")\n\t\t\tbreak;\n\t}\n\n\tif(requestQuery.status && (!requestQuery.exclusiveStatus || requestQuery.exclusiveStatus === \"false\")) {\n\t\tsearch.filter(\"status\", \">=\", Number.parseInt(requestQuery.status))\n\t} else if (requestQuery.status) {\n\t\tsearch.filter(\"status\", \"=\", Number.parseInt(requestQuery.status))\n\t} else {\n\t\tsearch.filter(\"status\", \">=\", 2)\n\t}\n\n\tif(requestQuery.version) {\n\t\trequestQuery.version.replace(\".0\", \"\")\n\t\tsearch.filter(\"files.minecraftVersion\", \"=\", requestQuery.version)\n\t}\n\n\tif(requestQuery.search && !(requestQuery.search === \"undefined\" || requestQuery.search === \"null\")) {\n\t\tsearch.query(requestQuery.search, false)\n\t}\n\n\tif(requestQuery.limit && requestQuery.page) {\n\t\tsearch.paginate(Number.parseInt(requestQuery.limit), Number.parseInt(requestQuery.page) + 1)\n\t}\n\n\tif(requestQuery.includeTags) {\n\t\tlet tags = requestQuery.includeTags.split(\",\")\n\t\tfor(const tag of tags) {\n\t\t\tsearch.filter(\"tags\", \"=\", tag, \"AND\")\n\t\t}\n\t}\n\n\tif(requestQuery.excludeTags) {\n\t\tlet tags = requestQuery.excludeTags.split(\",\")\n\t\tfor(const tag of tags) {\n\t\t\tsearch.filter(\"tags\", \"!=\", tag, \"AND\")\n\t\t}\n\t}\n\n\tlet documents = await (search.execute()?.catch((e) => {\n\t\tconsole.error(e)\n\t\tsendLog(\"performSearch\", e)\n\t}))\n\tif(!documents) {\n\t\tconsole.error(\"Meilisearch is probably not initialized.\")\n\t\treturn {totalCount: 0, documents: []}\n\t}\n\treturn { totalCount: (search.hitsPerPageS) ? documents.totalHits : documents.estimatedTotalHits, documents: documents.hits.map((doc: any) => doc)}\n}","import { ObjectId } from \"mongodb\";\nimport jwt from 'jsonwebtoken'\n\nimport { Database } from \"../db/connect.js\";\nimport { ContentDocument } from \"../db/types.js\";\nimport { app } from \"../index.js\";\nimport { JWTKey, getUserFromJWT } from \"../auth/routes.js\";\nimport { approvedEmail, requestApprovalEmail } from \"../email/email.js\";\nimport { updateMeilisearch } from \"../meilisearch.js\";\nimport { UserTypes } from \"../auth/types.js\";\nimport { checkIfSlugUnique, fetchFromMCMaps, fetchFromPMC, uploadContent } from \"./creation.js\";\n\nexport function initializeContentRoutes() {\n    app.post('/content', async (req, res) => {\n        if(!req.body.content) {\n            res.send({error: \"Content not included in request body\"})\n            return;\n        }\n        if(!req.body.content.title) {\n            res.send({error: \"Content does not appear to be formatted correctly, title is missing\"})\n            return;\n        }\n        if(!req.body.content.type) {\n            res.send({error: \"Content does not appear to be formatted correctly, type is missing\"})\n            return;\n        }\n        let uploader;\n        if(req.headers.authorization) {\n            console.log(\"Got authorization, attempting to find user\")\n            uploader = await getUserFromJWT(req.headers.authorization);\n            console.log(\"Got user from authorization\")\n        }\n\n        switch(req.body.content.type) {\n            case \"map\":\n                res.send(await uploadContent(\"Maps\", req.body, uploader?.user))\n                break;\n            default:\n                res.send({error: \"Content type not supported\"})\n                break;\n        }\n    })\n\n    app.post(\"/content/import\", async (req, res) => {\n        let url = req.body.url;\n        let token = req.body.token;\n        if(!url){\n            res.send({error: \"URL to import is missing\"})\n            return;\n        }\n\n        let map: ContentDocument | undefined;\n\n        if(url.startsWith('https://www.planetminecraft.com')) {\n            map = await fetchFromPMC(url);\n        } else if(url.startsWith('https://www.minecraftmaps.com')) {\n            map = await fetchFromMCMaps(url);\n        } else {\n            res.send({error: \"URL is not supported for importing\"})\n            return;\n        }\n\n        if(map) {\n            if(token) {\n                let user = await getUserFromJWT(token)\n                if(user.user) {\n                    map.creators = [{username: user.user.username, handle: user.user.handle}]\n                }\n            }\n\n            let i = \"\";\n            let isSlugUnique = await checkIfSlugUnique(map.slu, \"Maps\")\n            while(!isSlugUnique) {\n                i += (Math.random() * 100).toFixed(0);\n                isSlugUnique = await checkIfSlugUnique(map.slug + i, \"Maps\")\n            }\n            map.slug = map.slug + i;\n\n            let database = new Database();\n            let result = await database.collection.insertOne(map);\n            let key\n            if(!token) {\n                key = jwt.sign({_id: result.insertedId}, JWTKey, {expiresIn: \"24h\"})\n            }\n            res.send({content: map.slug, key: key});\n        } else {\n            res.send({error: \"Map was not successfully imported\"})\n        }\n    })\n\n    app.post('/content/update', async (req, res) => {\n        let map = req.body.content as ContentDocument\n        let database = new Database();\n        let user = await getUserFromJWT(req.headers.authorization + \"\")\n        let currentMap = await database.collection.findOne<ContentDocument>({_id: new ObjectId(map._id)})\n\n        if(!user.user || !currentMap || (currentMap.creators?.filter(creator => creator.handle === user.user?.handle).length === 0 && user.user.type !== UserTypes.Admin)) { \n            console.log(\"User not found or not creator\")\n            return res.sendStatus(401);\n        }\n\n        if(!map) {\n            res.send({error: \"Map not sent in request\"})\n            return;\n        }\n\n        let i = \"\";\n        let isSlugUnique = (await checkIfSlugUnique(map.slug, req.body.type)) || map.slug === currentMap.slug\n        console.log(\"Checking if slug is unique: \" + isSlugUnique, map.slug, currentMap.slug)\n        while(!isSlugUnique) {\n            i += (Math.random() * 100).toFixed(0);\n            isSlugUnique = await checkIfSlugUnique(map.slug + i, req.body.type)\n        }\n        map.slug = map.slug + i;\n\n        let result = await database.collection.updateOne({_id: new ObjectId(map._id)}, {\n            \"$set\": {\n                title: map.title,\n                shortDescription: map.shortDescription,\n                description: map.description,\n                images: map.images,\n                status: map.status,\n                downloads: map.downloads,\n                slug: map.slug,\n                createdDate: new Date(map.createdDate),\n                updatedDate: (req.body.dontUpdateDate) ? new Date(map.updatedDate + \"\") : new Date(),\n                creators: map.creators,\n                files: map.files,\n                tags: map.tags,\n            }\n        })\n        res.send({result: result})\n    })\n\n    app.delete('/content', async (req, res) => {\n        let database = new Database();\n        let user = await getUserFromJWT(req.headers.authorization + \"\")\n        let currentMap = await database.collection.findOne<ContentDocument>({_id: new ObjectId(req.body.id)})\n\n        if(!user.user || !currentMap || currentMap.creators?.filter(creator => creator.handle === user.user?.handle).length === 0) { \n            console.log(\"User not found or not creator\")\n            return res.sendStatus(401);\n        }\n\n        let result = await database.collection.deleteOne({_id: new ObjectId(req.body.id)})\n        res.send({result: result})\n    })\n\n    app.post('/content/request_approval', async (req, res) => {\n        let link = \"https://next.mccreations.net/maps/\" + req.body.slug\n        let database = new Database();\n        let user = await getUserFromJWT(req.headers.authorization + \"\")\n        let map = await database.collection.findOne<ContentDocument>({slug: req.body.slug})\n\n        if(!user.user || !map || map.creators?.filter(creator => creator.handle === user.user?.handle).length === 0) { \n            return res.sendStatus(401);\n        }\n        requestApprovalEmail(link)\n\n        //https://discord.com/api/webhooks/1219390163105484860/pFfUP8gY7xP3OCkQpDSbcyPhZ5GbG485xl0Y3XrxRqpylSTiZ6S1PWVvXqjYEvzs3cFE\n    \n        await database.collection.updateOne({slug: req.body.slug}, {$set: {status: 1}})\n        res.sendStatus(200)\n\n        fetch('https://discord.com/api/webhooks/1219390163105484860/pFfUP8gY7xP3OCkQpDSbcyPhZ5GbG485xl0Y3XrxRqpylSTiZ6S1PWVvXqjYEvzs3cFE', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                content: \"New Map Requesting Approval: \" + link\n            })\n        \n        }).then(response => {\n            console.log(response)\n        })\n    })\n\n    app.get('/content/:slug/approve', async (req, res) => {\n        let database = new Database();\n        let user = await getUserFromJWT(req.headers.authorization + \"\")\n        if(!user.user || user.user.type !== UserTypes.Admin) {\n            return res.sendStatus(401);\n        }\n        await database.collection.updateOne({slug: req.params.slug}, {$set: {status: 2}})\n        res.sendStatus(200)\n\n        let map = await database.collection.findOne<ContentDocument>({slug: req.params.slug})\n        updateMeilisearch();\n        if(map) {\n            let creators = map.creators\n            creators?.forEach(async (creator) => {\n                let creators = new Database('content', 'creators')\n                let user = await creators.collection.findOne({handle: creator.handle})\n                if(user && user.email) {\n                    approvedEmail(user.email, \"https://next.mccreations.net/maps/\" + req.params.slug, map?.title + \"\")\n                }\n            })\n\n            let discordMessage = {\n                content: \"<@&883788946327347210>\",\n                allowed_mentions:{\n                    roles: [\n                        \"883788946327347210\"\n                    ]\n                },\n                embeds: [\n                    {\n                        title: map.title,\n                        //   type: \"rich\",\n                        description: map.shortDescription + \" https://next.mccreations.net/maps/\" + map.slug,\n                        url: \"https://next.mccreations.net/maps/\" + map.slug,\n                        //   timestamp: Date.now(),\n                        //   color: 1,\n                        image: {\n                            url: map.images[0]\n                        },\n                        author: {\n                            name: map.creators?.map(creator => creator.username).join(\", \")\n                        }\n                    }\n                ]\n            }\n\n            fetch(\"https://discord.com/api/webhooks/1020486876391559238/_efhzBaZTdt5IAHt3_YzBy2oOT5AYvoxg2Nr0lxMFaM3c6i8PYiuGXoOt_KZLHryZvLs\", {\n                method: 'post',\n                headers: {\n                \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(discordMessage)\n            });\n        }\n    })\n\n    app.post('/content/rate/:slug', async (req, res) => {\n        let database = new Database();\n        let map = req.body.map\n\t\n        // Calculate new rating\n        let rating = 0;\n        let ratings = map.ratings;\n        let rates = 1;\n        if(ratings) {\n            rates = map.ratings.length + 1;\n            ratings.push(Number.parseFloat(req.body.rating))\n        } else {\n            ratings = [Number.parseFloat(req.body.rating)]\n        }\n\n        for(let i = 0; i < rates; i++) {\n            rating += ratings[i];\n        }\n        rating = rating/(rates + 0.0);\n\n        database.collection.updateOne({slug: req.params.slug}, {$set: {ratings: ratings, rating: rating}}).then(() => {\n            res.send({rating: rating})\n        })\n    })\n}","import { MongoClient, ServerApiVersion } from 'mongodb';\nconst client = new MongoClient(process.env.MONGODB_URI!, {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true,\n  }\n});\n\nexport async function updateMeilisearch() {\n  const collection = client.db('content').collection('Maps')\n\n  let cursor = collection.find({})\n\n  let documents = []\n  for await (const doc of cursor) {\n      let timestampInMilliseconds = Date.parse(doc.createdDate);\n      let timestamp = timestampInMilliseconds / 1000; \n      doc.createdDate = timestamp;\n\n      timestampInMilliseconds = Date.parse(doc.updatedDate);\n      timestamp = timestampInMilliseconds / 1000;\n      doc.updatedDate = timestamp;\n      documents.push(doc);\n  }\n\n  client.close();\n\n  fetch('http://localhost:7700/indexes/maps/documents?primaryKey=_id', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + process.env.MEILISEARCH_KEY\n    },\n    body: JSON.stringify(documents)\n  })\n}\n\n","import axios from \"axios\";\nimport { JSDOM } from 'jsdom'\nimport jwt from 'jsonwebtoken'\nimport puppeteer from 'puppeteer'\n\nimport { User } from \"../auth/types.js\";\nimport { Database } from \"../db/connect.js\";\nimport { ContentDocument } from \"../db/types.js\";\nimport { JWTKey } from \"../auth/routes.js\";\nimport { upload } from \"../s3/upload.js\";\nimport { sendLog } from \"../logging/logging.js\";\n\nexport async function uploadContent(collection: string, body: any, uploader?: User) {\n    let database = new Database(\"content\", collection);\n\n    let slug = body.content.title.toLowerCase().replace(/\\s/g, \"_\").replace(/[^a-zA-Z0-9_]/g, \"\")\n    console.log(\"Slug: \" + slug)\n    let i = \"\";\n    let isSlugUnique = await checkIfSlugUnique(slug, collection)\n    while(!isSlugUnique) {\n        i += (Math.random() * 100).toFixed(0);\n        isSlugUnique = await checkIfSlugUnique(slug + i, collection)\n    }\n    slug = slug + i;\n\n    let content: ContentDocument = {\n        title: body.content.title as string,\n        shortDescription: body.content.summary as string,\n        description: \"\",\n        images: [],\n        status: 0,\n        downloads: 0,\n        views: 0,\n        slug: slug,\n        rating: 0,\n        createdDate: new Date(Date.now())\n    }\n    console.log(\"Attempting to insert map\")\n    let result = await database.collection.insertOne(content);\n    console.log(\"Map inserted\")\n\n    if(uploader) {\n        database.collection.updateOne({_id: result.insertedId}, {$push: {creators: {username: uploader.username, handle: uploader.handle}}})\n        return({slug: content.slug});\n    } else {\n        console.log(\"No user, creating temporary access key\")\n        let key = jwt.sign({_id: result.insertedId.toJSON()}, JWTKey, {expiresIn: \"24h\"})\n        return({key: key, slug: content.slug});\n    }\n}\n\nexport async function fetchFromPMC(url: string) {\n    let res = await axios.get(url)\n    let html = new JSDOM(res.data).window.document\n\n    \n    let title = html.querySelector('div#resource-title-text h1')?.textContent?.trim();\n    if(!title) return;\n    let slug = title.toLowerCase().replace(/\\s/g, \"_\").replace(/[^a-zA-Z0-9_]/g, \"\")\n    let description = html.querySelector('#r-text-block')?.innerHTML\n    if(!description) return;\n    let shortDescription = ''\n    let status = 0\n    let downloads = 0;\n    let views = 0;\n    let rating = 0;\n    let createdDate = new Date();\n    let users = html.querySelectorAll('.pusername')\n    let username = \"\"\n    if(users.length === 1) {\n        username = html.querySelectorAll('.pusername')[0].textContent + \"\"\n    } else {\n        username = html.querySelectorAll('.pusername')[1].textContent + \"\"\n    }\n\n    let map: ContentDocument = {\n        title: title,\n        slug: slug,\n        description: description,\n        shortDescription: shortDescription,\n        status: status,\n        downloads: downloads,\n        views: views,\n        rating: rating,\n        createdDate: createdDate,\n        images: [],\n        creators: [{username: username}],\n        importedUrl: url\n    }\n\n    map.files = [{type: 'world', worldUrl: \"https://www.planetminecraft.com\" + html.querySelector('.branded-download')?.getAttribute('href'), minecraftVersion: ''}]\n    let images = html.querySelectorAll('.rsImg')\n    images.forEach(async (image, idx) => {\n        let url = image.getAttribute('href')!\n        map.images.push(url)\n    })\n\n    // await loadAndTransferImages(map)\n    return map;\n}\n\nexport async function fetchFromMCMaps(url: string) {\n    const mapInfoLocator = 'Map Info</h2>\\n</center></td>\\n</tr>\\n</tbody>\\n</table>'\n    const pictureLocator = '<table style=\"width: 100%;\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\\n<tbody>\\n<tr>\\n<td class=\"info_title\"><center>\\n<h2>Pictures</h2>\\n</center></td>\\n</tr>\\n</tbody>\\n</table>'\n    const changelogLocator = '<table border=\"0\" width=\"98%\" cellspacing=\"0\" cellpadding=\"0\">\\n<tbody>\\n<tr>\\n<td class=\"info_title\">\\n<h2><center>Changelog</center></h2>\\n</td>\\n</tr>\\n</tbody>\\n</table>'\n    let res = await axios.get(url)\n    let html = new JSDOM(res.data).window.document\n\n    let descTable = html.querySelector('table')?.querySelector('table')?.querySelector('td')?.innerHTML\n    let statsPanel = html.querySelector('div.stats_data')?.querySelectorAll('table')[1]\n    if(!descTable) return;\n    let mapInfoStart = descTable.indexOf(mapInfoLocator)\n    let pictureStart = descTable.indexOf(pictureLocator)\n    let changelogStart = descTable.indexOf(changelogLocator)\n\n    let title = html.querySelector('h1')?.textContent?.trim();\n    if(!title) return;\n    let slug = title.toLowerCase().replace(/\\s/g, \"_\").replace(/[^a-zA-Z0-9_]/g, \"\")\n    let description = \"\"\n    if(descTable.includes(pictureLocator)) {\n        description = descTable.substring(mapInfoStart + mapInfoLocator.length, pictureStart)\n    } else {\n        description = descTable.substring(mapInfoStart + mapInfoLocator.length, changelogStart)\n    }\n    description.replace(/\\<table style=\"width: 98%;\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"\\>\\n\\<tbody\\>\\n\\<tr>\\n\\<td class=\"info_title\"><center>/g, \"\")\n    description.replace(/\\<\\/center\\>\\<\\/td\\>\\n\\<\\/tr\\>\\n\\<\\/tbody\\>\\n\\<\\/table>/g, \"\")\n    let shortDescription = ''\n    let status = 0\n    let downloads = 0;\n    let views = 0;\n    let rating = 0;\n    let createdDate = new Date();\n    let username = statsPanel?.querySelectorAll('tr')[0].querySelectorAll('span')[1].textContent + \"\"\n\n    let map: ContentDocument = {\n        title: title,\n        slug: slug,\n        description: description,\n        shortDescription: shortDescription,\n        status: status,\n        downloads: downloads,\n        views: views,\n        rating: rating,\n        createdDate: createdDate,\n        images: [],\n        creators: [{username: username}],\n        importedUrl: url\n    }\n\n    map.files = [{\n        type: 'world', \n        worldUrl: \"https://minecraftmaps.com\" + html.querySelector('.jdbutton')?.getAttribute('href'), \n        minecraftVersion: statsPanel?.querySelectorAll('tr')[3].querySelectorAll('span')[1].textContent + \"\", \n        contentVersion: statsPanel?.querySelectorAll('tr')[2].querySelectorAll('span')[1].textContent + \"\"}]\n\n    let images = html.querySelector('table')?.querySelector('table')?.querySelector('td')?.querySelectorAll('img')\n\n    map.images.push(html.querySelector('.map-images')?.getAttribute('src')!)\n    if(images) {\n        images.forEach(async (image, idx) => {\n            let url = image.getAttribute('data-src')!\n            // try {\n            //     let response = await axios.get(url);\n            //     let buffer = await response.data;\n            //     upload(new Uint8Array(buffer), `${map.slug}_image_${idx}${url.substring(url.lastIndexOf('.'))}`);\n            //     map.images.push(`https://mccreations.s3.us-west-1.amazonaws.com/${map.slug}_image_${idx}${url.substring(url.lastIndexOf('.'))}`)\n            // } catch(e) {\n                map.images.push(url)\n            // }\n        })\n    }\n    // await loadAndTransferImages(map)\n    return map;\n}\n\ninterface TransferredImage {\n    originalUrl: string,\n    transferredUrl: string\n}\n\nexport async function loadAndTransferImages(map: ContentDocument) {\n    try {\n        puppeteer.launch().then(async browser => {\n            try {\n                let idx = 0;\n                let fileCounter = 0;\n                let uploaded_images: TransferredImage[] = []\n                let timeoutSeconds = 30;\n                const page = await browser.newPage();\n            \n                page.on('response', async (response) => {\n                    try {\n                        const matches = /.*\\.(jpg|png|svg|gif|webp)$/.exec(response.url());\n                        if (matches && (matches.length === 2) && (response.url().startsWith('https://www.minecraftmaps.com/images/jdownloads/screenshots/') || response.url().startsWith(\"https://static.planetminecraft.com/files/image/minecraft/\"))) {\n                            console.log(matches);\n                            const extension = matches[1];\n                            const buffer = await response.buffer();\n                            fileCounter += 1;\n                            let url = await upload(buffer, `${map.slug}_image_${fileCounter}.${extension}`)\n                            uploaded_images.push({transferredUrl: url, originalUrl: response.url()})\n                        }\n                    } catch(e) {\n                        console.log(\"Error uploading image: \" + e)\n                    }\n                  });\n                \n                await page.goto(map.importedUrl!);\n                try {\n                    // page.mouse.wheel({deltaY: 2000})\n    \n                    while(uploaded_images.length < map.images.length && timeoutSeconds > 0) {\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n                        timeoutSeconds--;\n                    }\n                    await browser.close();\n    \n                    if(timeoutSeconds <= 0) {\n                        return;\n                    }\n                    \n                    let database = new Database();\n                    for(let i = 0; i < map.images.length; i++) {\n                        let image = uploaded_images.find(img => img.originalUrl === map.images[i])\n                        if(image) {\n                            map.images[i] = image.transferredUrl\n                        }\n                    }\n                    await database.collection.updateOne({slug: map.slug}, {$set: {images: map.images}})\n                } catch(e) {\n                    sendLog(\"loadAndTransferImages\", e)\n                    console.log(\"Error loading page: \" + e)\n                \n                }\n            } catch(e) {\n                sendLog(\"loadAndTransferImages\", e)\n                console.log(\"Error fetching images using puppeteer: \" + e)\n            }\n        })\n    } catch(e) {\n        sendLog(\"loadAndTransferImages\", e)\n        console.log(\"Error launching puppeteer: \" + e)\n    }\n}\n\nexport async function checkIfSlugUnique(slug: string, collection: string) {\n    let database = new Database(\"content\", collection);\n    return (await database.collection.findOne({slug: slug})) === null\n}","import { Upload } from \"@aws-sdk/lib-storage\";\nimport { S3 } from \"@aws-sdk/client-s3\";\nimport fs from 'fs'\nimport papa from 'papaparse'\nimport { Readable } from \"stream\";\nimport { sendLog } from '../logging/logging.js';\n\nconst bucket = new S3({\n    region: 'us-west-1',\n\n    credentials: {\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID + \"\",\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY + \"\"\n    }\n});\n\nexport async function upload(file: File | string | Readable | Buffer | Uint8Array | Blob, name: string): Promise<string| any> {\n    name = name + Math.floor(Math.random() * 1000)\n    const params = {\n        Bucket: 'mccreations',\n        Key: name,\n        Body: file\n    }\n    try {\n        const u = new Upload({\n            client: bucket,\n            params\n        });\n        await u.done().catch((e) => {\n            sendLog(\"upload\", e)\n            console.error(e)\n        });\n        return \"https://mccreations.s3.us-west-1.amazonaws.com/\" + name\n    } catch (error) {\n        sendLog(\"upload\", error)\n        return error;\n    }\n}"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../"}